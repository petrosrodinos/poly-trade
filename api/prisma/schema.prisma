// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  username     String   @unique
  password  String
  role      Role   @default(USER)
  enabled   Boolean  @default(false)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  bots      Bot[]
  subscriptions BotSubscription[]
}

model Bot {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  user_uuid    String
  strategy    String @default("")
  symbol    String
  timeframe String
  active    Boolean  @default(true)
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  subscriptions BotSubscription[]
  user      User     @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)

  @@unique([strategy, symbol, timeframe])
}

model BotSubscription {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  user_uuid    String
  bot_uuid    String
  amount    Int
  leverage  Int @default(1)
  active    Boolean  @default(true)
  enabled   Boolean  @default(true)
  quantity  Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  bot       Bot      @relation(fields: [bot_uuid], references: [uuid], onDelete: Cascade)
  user      User     @relation(fields: [user_uuid], references: [uuid])

  @@unique([bot_uuid, user_uuid])
}

enum Role {
  USER
  ADMIN
  WEBHOOK
}



